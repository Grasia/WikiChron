# External imports
import os
from urllib.parse import urljoin, parse_qs
import pandas as pd

# flask imports
import flask

# local imports
from app import create_dash_app, set_up_app

# load config
from dash_config import DevelopmentConfig
wikichron_base_pathname = DevelopmentConfig.DASH_BASE_PATHNAME;
port = DevelopmentConfig.PORT;

global debug;
debug = True if os.environ.get('FLASK_ENV') == 'development' else False


# This part is only for launching of the dash app in standalone mode only #
# When using the Flask app, this doesn't need to be run #

#--------- BEGIN AUX SERVERS --------------------------------------------------#

def start_redirection_server(app):
    # Redirects index to /app
    @app.server.route('/')
    def redirect_index_to_app():
        print('Redirecting user to {}...'.format(wikichron_base_pathname))
        return flask.redirect(wikichron_base_pathname, code=302)

# we want to load some js dnymically:
# from the side_bar generation (generated by a dash callback) using gdc.Import()
# So that's why we still need this function to serve the js files but don't load them
# automatically when the app is loaded, but when we want to do it.
# It might have a better solution, but let it _just work_

# js files being serve by this server:
local_available_js = [
    'side_bar.js',
    'controls_side_bar.js',
    'main.share_modal.js',
    'piwik.js'
]


def start_js_server(app):
    static_js_route = 'js/'
    js_directory = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                                '..',
                                static_js_route)

    @app.server.route('/js/<js_path>.js')
    def serve_local_js(js_path):
        js_name = '{}.js'.format(js_path)
        if js_name not in local_available_js:
            raise Exception(
                '"{}" is excluded from the allowed static files'.format(
                    js_path
                )
            )
        print ('Returning: {}'.format(js_name))
        return flask.send_from_directory(js_directory, js_name)

    return


def start_aux_servers(app):
    # start auxiliar servers:
    start_js_server(app)
    start_redirection_server(app)

    return


def run(app):
    app.run_server(debug=debug, port=port)
    return


server = flask.Flask(__name__)

# load config for flask server
server.config.from_object(DevelopmentConfig)

# create and config Dash instance
app = create_dash_app(server)

# set layout, import startup js and bind callbacks
set_up_app(app)

# init auxiliar servers & deps
start_aux_servers(app)

run(app)
